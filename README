A.
0000000000600e50 d _DYNAMIC
0000000000600fe8 d _GLOBAL_OFFSET_TABLE_
0000000000400608 R _IO_stdin_used
                 w _Jv_RegisterClasses
00000000004004b4 T _Z6avergePdRd
00000000004004e2 T _Z6avergeif
0000000000600e30 d __CTOR_END__
0000000000600e28 d __CTOR_LIST__
0000000000600e40 D __DTOR_END__
0000000000600e38 d __DTOR_LIST__
0000000000400738 r __FRAME_END__
0000000000600e48 d __JCR_END__
0000000000600e48 d __JCR_LIST__
0000000000601018 A __bss_start
0000000000601008 D __data_start
00000000004005c0 t __do_global_ctors_aux
0000000000400420 t __do_global_dtors_aux
0000000000601010 D __dso_handle
                 w __gmon_start__
0000000000600e24 d __init_array_end
0000000000600e24 d __init_array_start
00000000004005b0 T __libc_csu_fini
0000000000400520 T __libc_csu_init
                 U __libc_start_main@@GLIBC_2.2.5
0000000000601018 A _edata
0000000000601028 A _end
00000000004005f8 T _fini
0000000000400390 T _init
00000000004003d0 T _start
00000000004003fc t call_gmon_start
0000000000601018 b completed.6531
0000000000601008 W data_start
0000000000601020 b dtor_idx.6533
0000000000400490 t frame_dummy
000000000040050a T main
00000000004004b4 T _Z7averagePdRd 00000000004004e2 T _Z7averageif ，主要看這兩個
因為nm這個指令即是印出object的symbol，而程式裡面有兩個相同名稱的function都叫average，所以g++在編譯時會自動用它後面輸出的type定名作編號來區分兩個，這叫function overloading
第一個average是吃(double*,double&)，所以命名就叫averagePdRd，後面的Pd就是pointer double和Rd就是referance double
第二個則是average是吃(int,float)， 所以命名就叫averageif，後面的i就是int、f就是float。

B.
1 8
4 8
4 8
8 8
第一列都是各個變數所占用的記憶體，char佔用了1byte，int佔用了4byte，float佔用了4byte，double則佔用了8byte
第二列則是用來存變數位置的指標所占用的記憶體，由此可見不管是int，還是double都占用了8byte，會是8byte是因為式64位元的電腦
